{"title":"Song Lyrics Scraping","markdown":{"yaml":{"toc":true,"title":"Song Lyrics Scraping","subtitle":"A project that aimed to scrape song lyrics from the Vagalume brazilian site and make it available in Kaggle.","links":[{"icon":"kaggle","icon_pack":"fab","name":"Dataset","url":"https://www.kaggle.com/neisse/scrapped-lyrics-from-6-genres"},{"icon":"file-alt","icon_pack":"fas","name":"Post","url":"https://www.aneisse.com/posts/2019-02-22-lyrics-scraping/2019-02-22-lyrics-scraping.html"}],"tags":["Data Science"],"image":"featured.png","format":"html"},"containsRefs":false,"markdown":"\n\nThis project aimed, above all, to stretch my web scraping skills while having some fun. The final result was a dataset of song lyrics from 6 musical genres scraped from the [Vagalume](https://www.vagalume.com.br/). The dataset can be used for analyses at [Kaggle](https://www.kaggle.com/neisse/scrapped-lyrics-from-6-genres). I also detailed how i obtained the data (with code in R) in [this post](https://www.aneisse.com/posts/2019-02-22-lyrics-scraping/2019-02-22-lyrics-scraping.html).\n\n```{r, warning = FALSE, message = FALSE}\n#| echo: false\n#| results: asis\nread_yaml_matter <- function(input_file) {\n  # https://stackoverflow.com/questions/62095329/how-to-edit-an-r-markdown-yaml-header-programmatically/62096216#62096216 # nolint\n  input_lines <- readLines(input_file)\n  delimiters <- grep(\"^---\\\\s*$\", input_lines)\n  if (!length(delimiters)) {\n    stop(\"unable to find yaml delimiters\")\n  } else if (length(delimiters) == 1L) {\n    if (delimiters[1] == 1L) {\n      stop(\"cannot find second delimiter, first is on line 1\")\n    } else {\n      # found just one set, assume it is *closing* the yaml matter;\n      # fake a preceding line of delimiter\n      delimiters <- c(0L, delimiters[1])\n    }\n  }\n  delimiters <- delimiters[1:2]\n  yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])\n}\n\nread_yaml_talks_pt <- function(){\n  cat('<script src=\"https://kit.fontawesome.com/1bb720cc6f.js\" crossorigin=\"anonymous\"></script>')\n\n  yaml_atual <- fs::dir_ls(glob = \"*.qmd\") |>\n    read_yaml_matter()\n\n  if(!is.null(yaml_atual$event)){\n    cat(paste0(\"<b>Evento: </b>\", yaml_atual$event, \"<br>\"))\n  }\n\n  if(!is.null(yaml_atual$event_url)){\n    cat(paste0(\"<b>Link do evento:</b> <a href='\", yaml_atual$event_url, \"'>\", yaml_atual$event_url, \"</a><br>\"))\n  }\n\n  if(!is.null(yaml_atual$location)){\n    cat(paste0(\"<b>Lugar: </b>\", yaml_atual$location, \"<br>\"))\n  }\n\n\n\n  if(!is.null(yaml_atual$links)){\n    cat(paste0(\"<h2> Materials</h2> <br><center>\"))\n\n\n    for (position in 1:length(yaml_atual$links)) {\n      item <- yaml_atual$links[[position]]\n\n      if(item$icon_pack %in% c(\"fas\", \"far\", \"fa\")){\n        item$icon_pack <- \"solid\"\n      } else if(item$icon_pack == \"fab\"){\n        item$icon_pack <- \"brands\"\n      }\n\n      cat(paste0(\"<a href='\", item$url, \"' target='_blank' rel='noopener'><button class='btn btn-primary' style='margin: 10px;'><i class='\", \"fa-\", item$icon_pack , \" fa-\", item$icon, \"'></i> \", item$name, \"</a></button>  \"))\n    }\n\n    if(!is.null(yaml_atual$image)){\n      cat(paste0(\"<br><br><img src='\", yaml_atual$image, \"' class='img-fluid quarto-figure-center' style='max-width:80%'><br>\"))\n    }\n\n\n    cat(paste0(\"</center>\"))\n  }\n}\n#source(here::here(\"R/utils.r\"))\nread_yaml_talks_pt()\n```","srcMarkdownNoYaml":"\n\nThis project aimed, above all, to stretch my web scraping skills while having some fun. The final result was a dataset of song lyrics from 6 musical genres scraped from the [Vagalume](https://www.vagalume.com.br/). The dataset can be used for analyses at [Kaggle](https://www.kaggle.com/neisse/scrapped-lyrics-from-6-genres). I also detailed how i obtained the data (with code in R) in [this post](https://www.aneisse.com/posts/2019-02-22-lyrics-scraping/2019-02-22-lyrics-scraping.html).\n\n```{r, warning = FALSE, message = FALSE}\n#| echo: false\n#| results: asis\nread_yaml_matter <- function(input_file) {\n  # https://stackoverflow.com/questions/62095329/how-to-edit-an-r-markdown-yaml-header-programmatically/62096216#62096216 # nolint\n  input_lines <- readLines(input_file)\n  delimiters <- grep(\"^---\\\\s*$\", input_lines)\n  if (!length(delimiters)) {\n    stop(\"unable to find yaml delimiters\")\n  } else if (length(delimiters) == 1L) {\n    if (delimiters[1] == 1L) {\n      stop(\"cannot find second delimiter, first is on line 1\")\n    } else {\n      # found just one set, assume it is *closing* the yaml matter;\n      # fake a preceding line of delimiter\n      delimiters <- c(0L, delimiters[1])\n    }\n  }\n  delimiters <- delimiters[1:2]\n  yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])\n}\n\nread_yaml_talks_pt <- function(){\n  cat('<script src=\"https://kit.fontawesome.com/1bb720cc6f.js\" crossorigin=\"anonymous\"></script>')\n\n  yaml_atual <- fs::dir_ls(glob = \"*.qmd\") |>\n    read_yaml_matter()\n\n  if(!is.null(yaml_atual$event)){\n    cat(paste0(\"<b>Evento: </b>\", yaml_atual$event, \"<br>\"))\n  }\n\n  if(!is.null(yaml_atual$event_url)){\n    cat(paste0(\"<b>Link do evento:</b> <a href='\", yaml_atual$event_url, \"'>\", yaml_atual$event_url, \"</a><br>\"))\n  }\n\n  if(!is.null(yaml_atual$location)){\n    cat(paste0(\"<b>Lugar: </b>\", yaml_atual$location, \"<br>\"))\n  }\n\n\n\n  if(!is.null(yaml_atual$links)){\n    cat(paste0(\"<h2> Materials</h2> <br><center>\"))\n\n\n    for (position in 1:length(yaml_atual$links)) {\n      item <- yaml_atual$links[[position]]\n\n      if(item$icon_pack %in% c(\"fas\", \"far\", \"fa\")){\n        item$icon_pack <- \"solid\"\n      } else if(item$icon_pack == \"fab\"){\n        item$icon_pack <- \"brands\"\n      }\n\n      cat(paste0(\"<a href='\", item$url, \"' target='_blank' rel='noopener'><button class='btn btn-primary' style='margin: 10px;'><i class='\", \"fa-\", item$icon_pack , \" fa-\", item$icon, \"'></i> \", item$name, \"</a></button>  \"))\n    }\n\n    if(!is.null(yaml_atual$image)){\n      cat(paste0(\"<br><br><img src='\", yaml_atual$image, \"' class='img-fluid quarto-figure-center' style='max-width:80%'><br>\"))\n    }\n\n\n    cat(paste0(\"</center>\"))\n  }\n}\n#source(here::here(\"R/utils.r\"))\nread_yaml_talks_pt()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"lyrics-scraping.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":{"light":"cosmo","dark":["cosmo","../../theme-dark.scss"]},"title":"Song Lyrics Scraping","subtitle":"A project that aimed to scrape song lyrics from the Vagalume brazilian site and make it available in Kaggle.","links":[{"icon":"kaggle","icon_pack":"fab","name":"Dataset","url":"https://www.kaggle.com/neisse/scrapped-lyrics-from-6-genres"},{"icon":"file-alt","icon_pack":"fas","name":"Post","url":"https://www.aneisse.com/posts/2019-02-22-lyrics-scraping/2019-02-22-lyrics-scraping.html"}],"tags":["Data Science"],"image":"featured.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}